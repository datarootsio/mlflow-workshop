version: '3'
services:
  s3:
    image: minio/minio:latest
    container_name: s3
    command: server --console-address ":9001" /data/
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./data/s3/:/data

  createbuckets:
    image: minio/mc
    depends_on:
      - s3
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add myminio http://s3:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}; /usr/bin/mc rm -r --force myminio/${AWS_S3_BUCKET_NAME}; /usr/bin/mc mb myminio/${AWS_S3_BUCKET_NAME}; /usr/bin/mc policy download myminio/${AWS_S3_BUCKET_NAME}; exit 0; "

  mlflow-db:
    container_name: mlflow-db
    image: postgres:14.3
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
    volumes:
      - ./data/postgres/:${PGDATA}

  mlflow:
    image: mlflow-server
    container_name: mlflow-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "5000"
    volumes:
      - "./data:/mlflow"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
    command: >
      mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db/${POSTGRES_DB}  --artifacts-destination s3://${AWS_S3_BUCKET_NAME}/ --serve-artifacts  --host 0.0.0.0

  nginx:
    restart: unless-stopped
    image: nginx:alpine
    container_name: nginx
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./.htpasswd:/etc/nginx/auth/.htpasswd:ro"
    ports:
      - "80:80"
